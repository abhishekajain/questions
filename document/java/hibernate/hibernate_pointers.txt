-----------------------------------------------------------------------------------------------------------------------
Important Hibernate terms and use
-----------------------------------------------------------------------------------------------------------------------
1. Cache:
	First-level:
	First-level cache always Associates with the Session object. Hibernate uses this cache by default. Here, it processes one transaction after another one, means wont process one transaction many times. Mainly it reduces the number of SQL queries it needs to generate within a given transaction. That is instead of updating after every modification done in the transaction, it updates the transaction only at the end of the transaction.

	Second-level:
	Second-level cache always associates with the Session Factory object. While running the transactions, in between it loads the objects at the Session Factory level, so that those objects will be available to the entire application, not bound to single user. Since the objects are already loaded in the cache, whenever an object is returned by the query, at that time no need to go for a database transaction. In this way the second level cache works. Here we can use query level cache also.

2. Sample Use low level
	Configuration cf = new Configuration().configure("hibernate.cfg.xml");
	SessionFactory sf = cf.buildSessionFactory(sr);
	Session session = sf.openSession();
	Entity std = new Entity();	
	Transaction tx = session.beginTransaction();	
	session.save(std);
	tx.commit();
	session.close();
	sf.close();
	
3. Different between session.get() and session.load()
	session.load()
	It will always return a "proxy" (Hibernate term) without hitting the database. In Hibernate, proxy is an object with the given identifier value, its properties are not initialized yet, it just look like a temporary fake object. If no row found , it will throws an ObjectNotFoundException.

	session.get()
	It always hit the database and return the real object, an object that represent the database row, not proxy. If no row found , it return null.

5. Update and Merge method
	The major difference between update and merge is that update method cannot be used when the same object exists in the session. 
	Entity en = session.load(Entity.class, 10);
	Entity enNew = new Entity(10);
	session.update(enNew); will fail with NonUniqueObjectException
	session.merge(enNew); will not fail	
	
4 Hibernate State of Object

	Transient
	When ever an object of a pojo class is Created(instantiated) using the new operator then it will be in the Transient state; this object is not associated with any Hibernate Session. 
	This object don’t have any association with any database table row. In other words any modification in data of transient state object doesn’t have any impact on the database table.
	
	Persistent
	When the object is in persistent state, then it represent one row of the database, and it is associated with the unique Session. Hibernate will detect any changes made to an object in persistent state and synchronize the state with the database when the unit of work completes.  
 
	You can create persistent objects via two ways:
	Loading the object from the database via Hibernate APIs
	Saving the object to the database via Hibernate APIs
 
	Ways to Save an Object 
		save()
		saveOrUpdate()
		persist();
	Detached
	if we want to move an object from persistent to detached state, we need to close the session or clear the cache of the session.

	Here the reference to the object is still valid and the detached instance can be modified in this state.
	A detached instance can be reattached to a new Session at a later point in time, making it (and all the modification) persistent again.
 
	This reattaching of object from detached  to persistent state can be done by calling the following methods –
		update()
		merge()
		saveOrUpdate()
		lock() – It is reattached but not saved.
	Removed
	A persistent object is considered to be in the removed state when a delete() or remove() operation is called on it. Note that Once you’ve deleted an object and moved to the "removed" state, you should no longer use that particular object for any reason.
  
 

