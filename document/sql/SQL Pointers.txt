-----------------------------------------------------------------------------------------------------------------------
Different Types of SQL JOINs
-----------------------------------------------------------------------------------------------------------------------

1 (INNER) JOIN: Returns records that have matching values in both tables

	SELECT column_name(s) FROM table1 INNER JOIN table2 ON table1.column_name = table2.column_name;
	SELECT column_name(s) FROM table1 , table2 where table1.column_name = table2.column_name;

	SELECT Orders.OrderID, Customers.CustomerName FROM Orders INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID where Customers.CustomerName like '%man%';

	SELECT Orders.OrderID, Customers.CustomerName FROM Orders , Customers where Orders.CustomerID = Customers.CustomerID and Customers.CustomerName like '%man%';

2 LEFT (OUTER) JOIN: The LEFT JOIN keyword returns all records from the left table (table1), and the matched records from the right table (table2). The result is NULL from the right side, if there is no match.

	SELECT column_name(s) FROM table1 LEFT JOIN table2 ON table1.column_name = table2.column_name;

	find customer name without any orders
		SELECT Customers.CustomerName, Orders.OrderID FROM Customers LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID where Orders.OrderId is null ORDER BY Customers.CustomerName;

3 RIGHT (OUTER) JOIN: The RIGHT JOIN keyword returns all records from the right table (table2), and the matched records from the left table (table1). The result is NULL from the left side, when there is no match.

	SELECT Orders.OrderID, Employees.LastName, Employees.FirstName FROM Orders RIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID ORDER BY Orders.OrderID;

4 FULL (OUTER) JOIN: Return all records when there is a match in either left or right table. The FULL OUTER JOIN keyword return all records when there is a match in either left (table1) or right (table2) table records.

	Note: FULL OUTER JOIN can potentially return very large result-sets
	SELECT Customers.CustomerName, Orders.OrderID FROM Customers FULL OUTER JOIN Orders ON Customers.CustomerID=Orders.CustomerID ORDER BY Customers.CustomerName;
	
5 SQL Self JOIN A self JOIN is a regular join, but the table is joined with itself.

	The following SQL statement matches customers that are from the same city:
	// not equal customer id // but equal name
	SELECT A.CustomerName AS CustomerName1, B.CustomerName AS CustomerName2, A.City FROM Customers A, Customers B WHERE A.CustomerID <> B.CustomerID  AND A.City = B.City ORDER BY A.City;
	
6 GROUP BY Statement The GROUP BY statement is often used with aggregate functions (COUNT, MAX, MIN, SUM, AVG) to group the result-set by one or more columns.

	The following SQL statement lists the number of customers in each country:
	SELECT COUNT(CustomerID), Country FROM Customers GROUP BY Country;
	
	The following SQL statement lists the number of customers in each country, sorted high to low:
	SELECT COUNT(CustomerID), Country FROM Customers GROUP BY Country ORDER BY COUNT(CustomerID) DESC;
	
	The following SQL statement lists the number of orders sent by each shipper:
	SELECT Shippers.ShipperName, COUNT(Orders.OrderID) AS NumberOfOrders FROM Orders LEFT JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID GROUP BY ShipperName;
	The following SQL statement lists all shippers and the number of orders sent by each shipper: Here it will list the shipper with no order as zero orders from the shipper
	SELECT Shippers.ShipperName, COUNT(Orders.OrderID) AS NumberOfOrders FROM Shippers LEFT JOIN Orders ON Orders.ShipperID = Shippers.ShipperID GROUP BY ShipperName;
	
6 SQL HAVING The HAVING clause was added to SQL because the WHERE keyword could not be used with aggregate functions.
	
	SELECT column_name(s) FROM table_name WHERE condition GROUP BY column_name(s) HAVING condition ORDER BY column_name(s);
	
	The following SQL statement lists the number of customers in each country. Only include countries with more than 5 customers:
	SELECT COUNT(CustomerID), Country FROM Customers GROUP BY Country HAVING COUNT(CustomerID) > 5;
	
	The following SQL statement lists the number of customers in each country, sorted high to low (Only include countries with more than 5 customers):
	SELECT COUNT(CustomerID), Country FROM Customers GROUP BY Country HAVING COUNT(CustomerID) > 5 ORDER BY COUNT(CustomerID) DESC;
	
	The following SQL statement lists the employees that have registered more than 10 orders:
	SELECT Employees.LastName, COUNT(Orders.OrderID) AS NumberOfOrders FROM (Orders INNER JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID) GROUP BY LastName HAVING COUNT(Orders.OrderID) > 10;
	
	The following SQL statement lists if the employees "Davolio" or "Fuller" have registered more than 25 orders:
	SELECT Employees.LastName, COUNT(Orders.OrderID) AS NumberOfOrders FROM Orders INNER JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID WHERE LastName = 'Davolio' OR LastName = 'Fuller' GROUP BY LastName HAVING COUNT(Orders.OrderID) > 25;